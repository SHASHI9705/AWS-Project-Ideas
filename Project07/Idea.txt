Project 7: Serverless Static Website – Use S3, CloudFront, and Lambda@Edge 
for global performance. 
A serverless static website on AWS eliminates the need for traditional web servers 
by using Amazon S3 for hosting static content, CloudFront for global content 
delivery, and Lambda@Edge for dynamic content processing. This setup provides 
high availability, low latency, and cost efficiency. 
Steps to Deploy a Serverless Static Website on AWS 

Step 1: Create an S3 Bucket for Website Hosting 
1. Open the AWS Management Console → Navigate to S3. 
2. Click Create bucket, enter a unique name, and choose the region. 
3. Uncheck "Block all public access" (if you want a public website). 
4. Upload your static website files (HTML, CSS, JS, images). 
5. Enable Static website hosting under Properties: 
○ Choose "Enable". 
○ Set index.html as the default document. 
○ Copy the Bucket Website URL. 

Step 2: Configure Bucket Policy for Public Access 
1. Go to Permissions → Click Bucket Policy. 
Add the following policy to make the website publicly accessible: 
json 
 
{ 
  "Version": "2012-10-17", 
  "Statement": [ 
    { 
      "Effect": "Allow", 
      "Principal": "*", 
      "Action": "s3:GetObject", 
      "Resource": "arn:aws:s3:::your-bucket-name/*" 
    } 
  ] 
} 
 
2. Save the policy. 
 
Step 3: Create a CloudFront Distribution 
1. Go to CloudFront in AWS Console. 
2. Click Create Distribution. 
3. Under Origin, select your S3 bucket (not the website endpoint, but the 
bucket itself). 
4. Enable "Redirect HTTP to HTTPS". 
5. Set Caching Policy to CachingOptimized (for better performance). 
6. Click Create and note the CloudFront URL. 
 
Step 4: (Optional) Use Lambda@Edge for Dynamic Processing 
If you need to modify responses dynamically (e.g., adding security headers, URL 
rewrites), create a Lambda@Edge function. 
1. Go to Lambda → Click Create Function. 
2. Choose Author from Scratch → Select Node.js or Python. 
3. Enable Lambda@Edge (set deployment to us-east-1). 
Add this sample script to modify HTTP headers: 
javascript 
exports.handler = async (event) => { 
const response = event.Records[0].cf.response; 
response.headers['x-custom-header'] = [{ key: 'X-Custom-Header', value: 
'MyServerlessSite' }]; 
return response; 
}; 
4. Deploy and associate it with CloudFront behavior. 


Step 5: (Optional) Use a Custom Domain with Route 53 
1. Register a domain using Route 53 (or use an existing domain). 
2. Create a CNAME record pointing to your CloudFront distribution. 
3. Use AWS Certificate Manager (ACM) to enable HTTPS with SSL. 


Conclusion 
With this setup, your static website is hosted on S3, served globally using 
CloudFront, and can be enhanced with Lambda@Edge for additional processing. 
This architecture ensures scalability, security, and cost efficiency.